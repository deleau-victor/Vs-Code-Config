/* eslint-disable no-undef */
/* eslint-disable prettier/prettier */
/* eslint-disable @typescript-eslint/indent */
/* eslint-disable @typescript-eslint/naming-convention */
module.exports = {
   parser: '@typescript-eslint/parser',
   parserOptions: {
      ecmaVersion: 2021,
      sourceType: 'module',
      project: './tsconfig.json',
   },
   plugins: ['@typescript-eslint', 'prettier'],
   extends: ['eslint:recommended', 'plugin:@typescript-eslint/recommended', 'prettier'],
   rules: {
      'prettier/prettier': [
         'error',
         {
            semi: false,
            singleQuote: true,
            trailingComma: 'all',
            arrowParens: 'always',
            printWidth: 100,
            tabWidth: 3,
            useTabs: false,
            bracketSpacing: true,
            jsxBracketSameLine: false,
            endOfLine: 'auto',
         },
      ],
      '@typescript-eslint/naming-convention': [
         'error',
         {
            selector: 'class',
            format: ['PascalCase'],
         },
         {
            selector: 'interface',
            format: ['PascalCase'],
            custom: {
               regex: '^I[A-Z]',
               match: true,
               message:
                  'Interface name "{{name}}" must start with the letter "I" and have a PascalCase name',
            },
         },
         {
            selector: 'typeLike',
            format: ['PascalCase'],
         },
         {
            selector: 'enumMember',
            format: ['UPPER_CASE'],
         },
         {
            selector: 'variable',
            format: ['camelCase', 'UPPER_CASE'],
         },
         {
            selector: 'parameter',
            format: ['camelCase'],
            leadingUnderscore: 'allow',
         },
         {
            selector: 'property',
            format: ['camelCase', 'snake_case'],
            leadingUnderscore: 'allow',
         },
         {
            selector: 'function',
            format: ['PascalCase'],
            leadingUnderscore: 'allow',
            prefix: [
               'sign',
               'verify',
               'bootstrap',
               'get',
               'set',
               'will',
               'fetch',
               'create',
               'update',
               'delete',
               'find',
               'remove',
               'add',
               'replace',
               'move',
               'copy',
               'can',
               'sort',
               'toggle',
               'reset',
               'parse',
               'on',
               'send',
               'change',
               'confirm',
               'check',
               'throw',
               'map',
               'validate',
               'save',
               'format',
               'generate',
            ],
         },
         {
            selector: 'method',
            format: ['PascalCase'],
            leadingUnderscore: 'allow',
            prefix: [
               'sign',
               'verify',
               'get',
               'set',
               'will',
               'fetch',
               'create',
               'update',
               'delete',
               'find',
               'remove',
               'add',
               'replace',
               'move',
               'can',
               'copy',
               'sort',
               'toggle',
               'reset',
               'parse',
               'on',
               'send',
               'change',
               'confirm',
               'check',
               'throw',
               'map',
               'validate',
               'save',
               'format',
               'generate',
            ],
         },
         {
            selector: 'typeParameter',
            format: ['PascalCase'],
            prefix: ['T'],
         },
      ],
      'no-case-declarations': 'off',
      '@typescript-eslint/indent': [
         'error',
         3,
         {
            SwitchCase: 1,
            ignoredNodes: [
               'FunctionExpression > .params[decorators.length > 0]',
               'FunctionExpression > .params > :matches(Decorator, :not(:first-child))',
               'ClassBody.body > PropertyDefinition[decorators.length > 0] > .key',
            ],
         },
      ],
      '@typescript-eslint/explicit-module-boundary-types': 'off',
      '@typescript-eslint/no-explicit-any': 'off',
      '@typescript-eslint/no-unused-vars': ['error', { argsIgnorePattern: '^_' }],
      '@typescript-eslint/no-empty-function': 'off',
      'arrow-parens': ['error', 'always'],
      'no-console': 'warn',
      'no-unused-vars': 'off',
      'no-useless-constructor': 'off',
      'object-curly-spacing': ['error', 'always'],
      semi: 'off',
      '@typescript-eslint/semi': ['error', 'never'],
      'comma-dangle': ['error', 'only-multiline'],
   },
}

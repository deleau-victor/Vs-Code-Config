{
	"Typescript React Arrow Function Componenent Export": {
		"prefix": "tsxafce",
		"body": [
			"import React from \"react\"",
			"import type { FC } from 'react'",
			"",
			"type ${1:${TM_FILENAME_BASE}}Props = {}",
			"",
			"const ${1:${TM_FILENAME_BASE}}: FC<${1:${TM_FILENAME_BASE}}Props> = ({}) => {",
			"   return <div>${1:${TM_FILENAME_BASE}}</div>",
			"}",
			"",
			"export default ${1:${TM_FILENAME_BASE}}",
			"",
			""
		],
		"description": "Typescript React Arrow Function Componenent Export"
	},
	"Typescript React Arrow Function Componenent Export Children": {
		"prefix": "tsxcafce",
		"body": [
			"import React from \"react\"",
			"import type { FC, PropsWithChildren } from 'react'",
			"",
			"type ${1:${TM_FILENAME_BASE}}Props = {}",
			"",
			"const ${1:${TM_FILENAME_BASE}}: FC<PropsWithChildren<${1:${TM_FILENAME_BASE}}Props>> = ({}) => {",
			"   return <div>${1:${TM_FILENAME_BASE}}</div>",
			"}",
			"",
			"export default ${1:${TM_FILENAME_BASE}}",
			"",
			""
		],
		"description": "Typescript React Arrow Function Componenent Export With Children"
	},
	"Typescript React Native Arrow Function Component Export NativeBase": {
		"prefix": "tsxnafcen",
		"body": [
			"import React, { FC } from \"react\"",
			"import { Box, Text } from \"native-base\"",
			"",
			"type ${1:${TM_FILENAME_BASE}}Props = {}",
			"",
			"const ${1:${TM_FILENAME_BASE}}: FC<${1:${TM_FILENAME_BASE}}Props> = ({}) => {",
			"   return (",
			"       <Box>",
			"           <Text>${1:${TM_FILENAME_BASE}}</Text>",
			"       </Box>",
			"   )",
			"}",
			"",
			"export default ${1:${TM_FILENAME_BASE}}",
			"",
			""
		],
		"description": "Typescript React Native Arrow Function Component Export NativeBase"
	},
	"useState": {
		"prefix": "useState",
		"body": [
			"const [${1:name}, set${1:Name}] = useState<${2:type}>(${3:initialState})"
		],
		"description": "Typescript React UseState"
	},
	"useEffect": {
		"prefix": "useEffect",
		"body": [
			"useEffect(() => {",
			"   ${1:first}",
			"",
			"   return () => {",
			"      ${2:second}",
			"   }",
			"}, [${3:dependencies}])"
		],
		"description": "Typescript React UseEffect"
	},
	"useCallback": {
		"prefix": "useCallback",
		"body": [
			"const ${1:name} = useCallback(() => {",
			"   ${2:callback}",
			"}, [${3:dependencies}])"
		],
		"description": "Typescript React UseCallback"
	},
	"useMemo": {
		"prefix": "useMemo",
		"body": ["useMemo(() => ${1:callback}, [${2:dependencies}])"],
		"description": "Typescript React UseMemo"
	},
	"useRef": {
		"prefix": "useRef",
		"body": ["const ${1:name} = useRef(${2:initialState})"],
		"description": "Typescript React UseRef"
	},
	"useContext": {
		"prefix": "useContext",
		"body": ["const ${1:name} = useContext()"],
		"description": "Typescript React UseContext"
	},
	"useId": {
		"prefix": "useId",
		"body": ["const ${1:name} = useId()"],
		"description": "Typescript React UseId"
	},
	"useTransition": {
		"prefix": "useTransition",
		"body": ["const [isPending, startTransition] = useTransition()"],
		"description": "Typescript React UseTransition"
	},
	"useReducer": {
		"prefix": "useReducer",
		"body": [
			"const [state, dispatch] = useReducer(${1:reducer}, ${2:initialState}, ${3:init})"
		],
		"description": "Typescript React UseReducer"
	},
	"useAppDispatch": {
		"prefix": "useAppDispatch",
		"body": ["const dispatch = useAppDispatch()"],
		"description": "useAppDispatch"
	},
	"useAppSelector": {
		"prefix": "useAppSelector",
		"body": ["const {} = useAppSelector((state) => state.${1:fisrt})"],
		"description": "useAppSelector"
	},
	"useRouter": {
		"prefix": "useRouter",
		"body": ["const router = useRouter()"],
		"description": "useRouter"
	},
	"useSupabase": {
		"prefix": "useSupabase",
		"body": ["const supabase = useSupabase()"],
		"description": "useSupabase"
	},
	"fetchSupabaseData": {
		"prefix": "fetchSupabaseData",
		"body": [
			"const { data, error } = await supabase",
			"   .from('${1:table}')",
			"   .select('${2:column}')",
			"   .eq('${3:column}', ${4:value})"
		],
		"description": "fetchSupabaseData"
	}
}
